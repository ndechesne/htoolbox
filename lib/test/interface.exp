
Test: typical backup
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
Database initialized
 -> Database open
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
A C:/Test/File.TXT (0 B)
Adding file data to DB in: test_db/data/d41d8cd98f00b204e9800998ecf8427e-0
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User test_db/mount
Backup client 'myClient' using protocol 'nfs'
 -> Reading backup list file
 --> Path: /home/User/test
Backup path '/home/User/test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User/test test_db/mount
A /home/User/test/File2.txt (0 B)
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
A test1/cvs
 -> Dir cvs
A test1/cvs/CVS
 -> Dir cvs/CVS
A test1/cvs/CVS/Entries (141 B)
Adding compressed file data to DB in: test_db/data/63b52e85e7a255c09df5cca819b74a88-0
A test1/cvs/dirbad
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
A test1/cvs/dirutd
 -> Dir cvs/dirutd
A test1/cvs/dirutd/CVS
 -> Dir cvs/dirutd/CVS
A test1/cvs/dirutd/CVS/Entries (42 B)
Adding compressed file data to DB in: test_db/data/5252f242d27b8c2c9fdbdcbb33545d07-0
A test1/cvs/dirutd/fileutd (0 B)
A test1/cvs/filenew.c (0 B)
A test1/cvs/fileutd.h (0 B)
A test1/dir space
 -> Dir dir space
A test1/dir space/file space (0 B)
A test1/test space (0 B)
A test1/testdir
 -> Dir testdir
A test1/testfile (13 B)
Adding compressed file data to DB in: test_db/data/59ca0efa9f5633cb0371bbc0355478d8-0
A test1/testlink
A test1/testpipe
Backup path 'test2'
A test2/testdir
 -> Dir testdir
A test2/testfile (145 kB)
Adding file data to DB in: test_db/data/3d546a1ce46c6ae10ad34ab8a81c542e-0
A test2/testfile2 (259 kB)
Adding file data to DB in: test_db/data/fb00cd74a5f35e89a7fbdd3c1d05375a-0
A test2/testfile~ (524 kB)
Adding file data to DB in: test_db/data/59071590099d21dd439896592338bf95-0
A test2/testlink
Protocol not supported: ssh
 -> Database closed

Test: same backup
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User test_db/mount
Backup client 'myClient' using protocol 'nfs'
 -> Reading backup list file
 --> Path: /home/User/test
Backup path '/home/User/test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User/test test_db/mount
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
 -> Dir cvs
 -> Dir cvs/CVS
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
 -> Dir cvs/dirutd
 -> Dir cvs/dirutd/CVS
 -> Dir dir space
 -> Dir testdir
Backup path 'test2'
 -> Dir testdir
Protocol not supported: ssh
 -> Journal is empty, not merging
 -> Database closed

Test: interrupted backup
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User test_db/mount
Backup client 'myClient' using protocol 'nfs'
 -> Reading backup list file
 --> Path: /home/User/test
Backup path '/home/User/test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User/test test_db/mount
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
 -> Dir cvs
 -> Dir cvs/CVS
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
 -> Dir cvs/dirutd
 -> Dir cvs/dirutd/CVS
 -> Dir dir space
A test1/dir space/big_file (512 kB)
Killing during write
Operation canceled: test1/dir space/big_file
 -> Database closed

Test: specify clients
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
Previous crash detected, attempting recovery
 -> Database open
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
 -> Dir cvs
 -> Dir cvs/CVS
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
 -> Dir cvs/dirutd
 -> Dir cvs/dirutd/CVS
 -> Dir dir space
! test1/dir space/big_file (512 kB)
Adding compressed file data to DB in: test_db/data/816df6f64deba63b029ca19d880ee10a-0
 -> Dir testdir
Backup path 'test2'
 -> Dir testdir
 -> Database closed

Test: scan DB
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
Scanning database contents: 8 files
 -> Journal is empty, not merging
 -> Database closed

Test: check DB
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
Scanning database contents thoroughly: 8 files
 -> Journal is empty, not merging
 -> Database closed

Test: restore file
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
U test_r/test2/testfile
 -> Database closed

Test: restore dir
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/big_file
U test_r/test1/dir space/file space
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
 -> Database closed

Test: restore subdir
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
 -> Database closed

Test: restore client
 -> Reading configuration file
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 --> Client: other
 --> Client: myhost
 --> Client: client
 -> Database open
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/big_file
U test_r/test1/dir space/file space
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
U test_r/test2/testdir
U test_r/test2/testfile
U test_r/test2/testfile2
U test_r/test2/testfile~
U test_r/test2/testlink
 -> Database closed
