Help
HBackup (c) 2006-2007 Hervé Fache
  -v,  --verbose
    Be verbose about actions

  -u,  --user
    Perform user-mode backup

  -t,  --check
    Check DB for corrupted data

  -s,  --scan
    Scan DB for missing data

  -r <directory>,  --restore <directory>
    Restore to directory

  -P <path>,  --path <path>
    Specify path

  -p,  --pretend
    Only check configuration

  -l,  --list
    List available data

  -D <UNIX epoch>,  --date <UNIX epoch>
    Specify date

  -d,  --debug
    Print debug information

  -C <client>,  --client <client>  (accepted multiple times)
    Specify client name

  -c <file name>,  --config <file name>
    Specify configuration file

  --,  --ignore_rest
    Ignores the rest of the labeled arguments following this flag.

  --version
    Displays version information and exits.

  -h,  --help
    Displays usage information and exits.

Version
HBackup (c) 2006-2007 Hervé Fache version 0.6a
Error
Error: -! -- Couldn't find match for argument
HBackup (c) 2006-2007 Hervé Fache
  -v,  --verbose
    Be verbose about actions

  -u,  --user
    Perform user-mode backup

  -t,  --check
    Check DB for corrupted data

  -s,  --scan
    Scan DB for missing data

  -r <directory>,  --restore <directory>
    Restore to directory

  -P <path>,  --path <path>
    Specify path

  -p,  --pretend
    Only check configuration

  -l,  --list
    List available data

  -D <UNIX epoch>,  --date <UNIX epoch>
    Specify date

  -d,  --debug
    Print debug information

  -C <client>,  --client <client>  (accepted multiple times)
    Specify client name

  -c <file name>,  --config <file name>
    Specify configuration file

  --,  --ignore_rest
    Ignores the rest of the labeled arguments following this flag.

  --version
    Displays version information and exits.

  -h,  --help
    Displays usage information and exits.

List prefixes (missing DB path)
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
Error: given DB path does not exist: test_db
List prefixes (empty DB path)
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
Error: given DB path does not contain a database: test_db
Typical backup
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Backing up in server mode
Database initialized
 -> Database open in read/write mode
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
A C:/Test/Dir
 -> Dir Dir
A C:/Test/Dir/a File.TXT (2 B)
Adding file data to DB in: test_db/data/b026324c6904b2a9cb4b88d6d61c81d1-0
A C:/Test/Dir/another File.TXT (2 B)
Adding file data to DB in: test_db/data/26ab0db90d72e28ad0ba1e22ee510510-0
A C:/Test/File.TXT (0 B)
Adding file data to DB in: test_db/data/d41d8cd98f00b204e9800998ecf8427e-0
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User test_db/mount
Backup client 'myClient' using protocol 'nfs'
 -> Reading backup list file
 --> Path: /home/User/test
Backup path '/home/User/test'
 -> umount test_db/mount
 -> mount -t nfs -o ro,noatime,nolock myClient:/home/User/test test_db/mount
A /home/User/test/File2.txt (0 B)
A /home/User/test/dir
 -> Dir dir
A /home/User/test/dir/file3.txt (2 B)
Adding file data to DB in: test_db/data/6d7fce9fee471194aa8b5b6e47267f03-0
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
A test1/cvs
 -> Dir cvs
 -> Parsing CVS entries
 --> f filenew.c 0
 --> f filemod.o 1159799231
 --> f fileutd.h 1159977880
 --> d dirbad 0
 --> d dirutd 0
A test1/cvs/CVS
 -> Dir cvs/CVS
A test1/cvs/CVS/Entries (161 B)
Adding compressed file data to DB in: test_db/data/fef51838cd3cfe8ed96355742eb71fbd-0
A test1/cvs/dirbad
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
A test1/cvs/dirutd
 -> Dir cvs/dirutd
 -> Parsing CVS entries
 --> f fileutd 1159977880
A test1/cvs/dirutd/CVS
 -> Dir cvs/dirutd/CVS
A test1/cvs/dirutd/CVS/Entries (42 B)
Adding compressed file data to DB in: test_db/data/5252f242d27b8c2c9fdbdcbb33545d07-0
A test1/cvs/dirutd/fileutd (0 B)
A test1/cvs/filenew.c (0 B)
A test1/cvs/fileutd.h (0 B)
A test1/dir space
 -> Dir dir space
A test1/dir space/file space (0 B)
A test1/test space (0 B)
A test1/testdir
 -> Dir testdir
A test1/testfile (13 B)
Adding compressed file data to DB in: test_db/data/59ca0efa9f5633cb0371bbc0355478d8-0
A test1/testlink
A test1/testpipe
Backup path 'test2'
A test2/testdir
 -> Dir testdir
A test2/testfile (145 kB)
Adding file data to DB in: test_db/data/3d546a1ce46c6ae10ad34ab8a81c542e-0
A test2/testfile2 (259 kB)
Adding file data to DB in: test_db/data/fb00cd74a5f35e89a7fbdd3c1d05375a-0
A test2/testfile~ (524 kB)
Adding file data to DB in: test_db/data/59071590099d21dd439896592338bf95-0
A test2/testlink
Protocol not supported: ssh
 -> Database closed
Specify clients
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Backing up in server mode
 -> Database open in read/write mode
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/mount
Backup client 'client' using protocol 'smb'
 -> Reading backup list file
 --> Path: C:/Test
Backup path 'C:/Test'
 -> Dir Dir
 -> umount test_db/mount
Backup client 'myhost' using protocol 'file'
 -> Reading backup list file
 --> client-wide filter and subdir
 ---> condition path_start subdir
 ---> condition not size< 100
 --> client-wide filter and bigfile
 ---> condition size>= 10
 ---> condition type file
 --> expiry 1 day(s)
 --> Path: test2
 --> Path: test1
 --> path-wide filter and not_object
 ---> condition not path_end .o
 --> path-wide filter or to_be_ignored
 ---> condition filter subdir
 ---> condition filter backup
 ---> condition not filter not_object
Backup path 'test1'
 -> Dir cvs
 -> Parsing CVS entries
 --> f filenew.c 0
 --> f filemod.o 1159799231
 --> f fileutd.h 1159977880
 --> d dirbad 0
 --> d dirutd 0
 -> Dir cvs/CVS
 -> Dir cvs/dirbad
Directory should be under CVS control: test1/cvs/dirbad
 -> Dir cvs/dirutd
 -> Parsing CVS entries
 --> f fileutd 1159977880
 -> Dir cvs/dirutd/CVS
 -> Dir dir space
 -> Dir testdir
Backup path 'test2'
 -> Dir testdir
 -> Journal is empty, not merging
 -> Database closed
User-mode backup
 --> Client: localhost
Backing up in user mode
Database initialized
 -> Database open in read/write mode
 -> Reading backup list file
 --> Path: test_user/testuser
Backup path 'test_user/testuser'
A test_user/testuser/f1.txt (3 B)
Adding file data to DB in: test_user/.hbackup/data/31d30eea8d0968d6458e0ad0027c9f80-0
A test_user/testuser/subdir
 -> Dir subdir
A test_user/testuser/subdir/f2.txt (3 B)
Adding file data to DB in: test_user/.hbackup/data/dbbf8220893d497d403bb9cdf49db7a4-0
A test_user/testuser/subdir2
 -> Dir subdir2
A test_user/testuser/subdir2/f3.txt (3 B)
Adding file data to DB in: test_user/.hbackup/data/d5b4c7d9b06b60a7846c4529834c9812-0
A test_user/testuser/subdir2/f4.txt (3 B)
Adding file data to DB in: test_user/.hbackup/data/90e2a51705594d033a3abe9d77b2b7ad-0
 -> Database closed
Scan DB
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Scanning database
 -> Database open in read/write mode
Scanning database contents: 10 files
 -> Journal is empty, not merging
 -> Database closed
Check DB
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Checking database
 -> Database open in read/write mode
Scanning database contents thoroughly: 10 files
 -> Journal is empty, not merging
 -> Database closed
List prefixes
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
 -> Database open in read-only mode
 -> Database closed
 client
 myClient
 myhost
Try to list paths in both myhost and smb://client (fails)
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
Error: maximum one client allowed
List paths in myhost
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
 -> Database open in read-only mode
 -> Database closed
 test1
 test2
List paths in myhost under test2/
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
 -> Database open in read-only mode
 -> Database closed
 test2/testdir
 test2/testfile
 test2/testfile2
 test2/testfile~
 test2/testlink
List paths in myhost under test1/cvs
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Showing list
 -> Database open in read-only mode
 -> Database closed
 test1/cvs/CVS
 test1/cvs/dirbad
 test1/cvs/dirutd
 test1/cvs/filenew.c
 test1/cvs/fileutd.h
Restore a file
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Restoring
 -> Database open in read-only mode
U test_r/test2/testfile
 -> Database closed
Restore all data in a prefix/dir path that's not by itself in DB
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Restoring
 -> Database open in read-only mode
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/file space
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
 -> Database closed
Restore all data in a prefix/dir path
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Restoring
 -> Database open in read-only mode
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
 -> Database closed
Restore all data in a prefix
 -> Reading configuration file
 ---> use trash, expiry: 1 day(s)
 --> global filter all backup
 ---> condition type file
 ---> condition path_end ~
 --> global filter any test_or
 ---> condition filter backup
 ---> condition not size< 1000
 --> Client: myClient
 ---> config file: /home/User/hbackup.list
 --> Client: other
 ---> config file: /home/backup/Backup.list
 --> Client: myhost
 ---> config file: etc/localhost.list
 ---> expiry: 1 day(s)
 --> Client: client
 ---> config file: C:\Backup\Backup.LST
Restoring
 -> Database open in read-only mode
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/file space
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
U test_r/test2/testdir
U test_r/test2/testfile
U test_r/test2/testfile2
U test_r/test2/testfile~
U test_r/test2/testlink
 -> Database closed
