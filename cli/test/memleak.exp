Version
HBackup (c) 2006-2008 Hervé Fache version 0.9c
 
 4 bytes in 1 blocks are definitely lost in loss record 2 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
 
 
 2,022 bytes in 87 blocks are possibly lost in loss record 13 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   std::string::_Rep::_S_create(unsigned, unsigned, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   (within /usr/lib/libstdc++.so.6.0.9)
   std::string::string(char const*, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   main (hbackup.cpp:202)
Help
HBackup (c) 2006-2008 Hervé Fache
  -h,  --help
    Displays usage information and exits.

  --version
    Displays version information and exits.

  --,  --ignore_rest
    Ignores the rest of the labeled arguments following this flag.

  -c <file name>,  --config <file name>
    Specify configuration file

  -C <client>,  --client <client>  (accepted multiple times)
    Specify client name

  -d,  --debug
    Print debug information

  -D <UNIX epoch>,  --date <UNIX epoch>
    Specify date

  -f,  --fix
    Fix backup database

  -H,  --hardlinks
    Create hierarchy of hard links

  -i,  --initialize
    Initialize if needed

  -l,  --list
    List available data

  -L,  --symlinks
    Create hierarchy of symlinks

  -P <path>,  --path <path>
    Specify path

  -q,  --quiet
    Be quiet

  -r <directory>,  --restore <directory>
    Restore to directory

  -s,  --scan
    Scan DB for missing data

  -t,  --check
    Check DB for corrupted data

  -u,  --user
    Perform user-mode backup

  -v,  --verbose
    Be verbose about actions

 
 4 bytes in 1 blocks are definitely lost in loss record 2 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
 
 
 2,015 bytes in 87 blocks are possibly lost in loss record 13 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   std::string::_Rep::_S_create(unsigned, unsigned, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   (within /usr/lib/libstdc++.so.6.0.9)
   std::string::string(char const*, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   main (hbackup.cpp:202)
Error
Error: -! -- Couldn't find match for argument
HBackup (c) 2006-2008 Hervé Fache
  -h,  --help
    Displays usage information and exits.

  --version
    Displays version information and exits.

  --,  --ignore_rest
    Ignores the rest of the labeled arguments following this flag.

  -c <file name>,  --config <file name>
    Specify configuration file

  -C <client>,  --client <client>  (accepted multiple times)
    Specify client name

  -d,  --debug
    Print debug information

  -D <UNIX epoch>,  --date <UNIX epoch>
    Specify date

  -f,  --fix
    Fix backup database

  -H,  --hardlinks
    Create hierarchy of hard links

  -i,  --initialize
    Initialize if needed

  -l,  --list
    List available data

  -L,  --symlinks
    Create hierarchy of symlinks

  -P <path>,  --path <path>
    Specify path

  -q,  --quiet
    Be quiet

  -r <directory>,  --restore <directory>
    Restore to directory

  -s,  --scan
    Scan DB for missing data

  -t,  --check
    Check DB for corrupted data

  -u,  --user
    Perform user-mode backup

  -v,  --verbose
    Be verbose about actions

 
 4 bytes in 1 blocks are definitely lost in loss record 2 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
 
 
 2,159 bytes in 88 blocks are possibly lost in loss record 13 of 13
   operator new(unsigned) (vg_replace_malloc.c:224)
   std::string::_Rep::_S_create(unsigned, unsigned, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   (within /usr/lib/libstdc++.so.6.0.9)
   std::string::string(char const*, std::allocator<char> const&) (in /usr/lib/libstdc++.so.6.0.9)
   main (hbackup.cpp:202)
List clients (missing DB path)
 -> Reading configuration file: etc/hbackup.conf
Error: Given DB path does not exist: test_db
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
List clients (empty DB path)
 -> Reading configuration file: etc/hbackup.conf
Error: Given DB path does not contain a database: test_db
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Backup, DB missing
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Backing up in server mode
Error: Given DB path does not exist: test_db
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Typical backup, initialize DB
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Backing up in server mode
Database initialized: test_db
Database open in read/write mode
Trying client 'aClient.vista' using protocol 'smb'
Backing up client: aClient.vista
Reading list of problematic checksums
List created: aClient.vista
Database open r/w: aClient.vista
Backing up path: C:/Test Dir
 -> mount -t cifs -o ro,noatime,nocase //aClient/C$ test_db/.mount/aClient.vista
A       C:/Test Dir/My Dir
My Dir\r
      \r
Checking data, sizes: f=2 z=36 (36)
Adding uncompressed data for b026324c6904b2a9cb4b88d6d61c81d1-0
A f     C:/Test Dir/My Dir/a File.TXT
Checking data, sizes: f=2 z=36 (36)
Adding uncompressed data for 26ab0db90d72e28ad0ba1e22ee510510-0
A f     C:/Test Dir/My Dir/another File.TXT
Checking data, sizes: f=0 z=0 (0)
Adding uncompressed data for d41d8cd98f00b204e9800998ecf8427e-0
A f     C:/Test Dir/My File.TXT
Database modified: aClient.vista
Database closed: aClient.vista
 -> umount -fl test_db/.mount/aClient.vista
Trying client 'client.xp' using protocol 'smb'
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/.mount/client.xp
 -> Reading client configuration file: client.xp
 -> Client: client
 --> Subset: xp
 --> Protocol: smb
 --> Hostname: myClient
 --> Options: username=Myself password=flesyM nocase 
 --> Config: C:/Backup/Backup.LST
 --> Expiry: none
 --> Paths: 
 ---> Path: C:/Test Dir
 ----> Filter: and silly
 -----> Condition: filter backup
 -----> Condition: type p
 -----> Condition: name a
 -----> Condition: name_start b
 -----> Condition: name_end c
 -----> Condition: name_regex d
 -----> Condition: path e
 -----> Condition: path_start f
 -----> Condition: path_end g
 -----> Condition: name_regex h
 -----> Condition: size>= 1
 -----> Condition: size> 2048
 -----> Condition: size<= 3000000
 -----> Condition: size< 4294967296
 -----> Condition: mode& 777
 -----> Condition: mode= 644
Backing up client: client.xp
List created: client.xp
Database open r/w: client.xp
Backing up path: C:/Test Dir
A       C:/Test Dir/My Dir
My Dir\r
      \r
Checking data, sizes: f=2 z=36 (36)
A       C:/Test Dir/My Dir/a File.TXT
Checking data, sizes: f=2 z=36 (36)
A       C:/Test Dir/My Dir/another File.TXT
Checking data, sizes: f=0 z=0 (0)
A       C:/Test Dir/My File.TXT
Database modified: client.xp
Database closed: client.xp
 -> umount -fl test_db/.mount/client.xp
Trying client 'myClient' using protocol 'nfs'
 -> mount -t nfs -o ro,noatime,nolock,soft,timeo=30,intr myClient:/home/User test_db/.mount/myClient
 -> Reading client configuration file: myClient
 -> Client: myClient
 --> Protocol: nfs
 --> No error if same file fails copy again
 --> Config: /home/User/hbackup.list
 --> Expiry: none
 --> Paths: 
 ---> Path: /home/User/test
 ----> Filter: or compress
 -----> Condition: name File2.txt
 -----> Condition: path dir/file3.txt
 ----> Compress filter: compress
Backing up client: myClient
List created: myClient
Database open r/w: myClient
Backing up path: /home/User/test
 -> umount -fl test_db/.mount/myClient
 -> mount -t nfs -o ro,noatime,nolock,soft,timeo=30,intr myClient:/home/User/test test_db/.mount/myClient
Checking data, sizes: f=0 z=0 (0)
A       /home/User/test/File2.txt
A       /home/User/test/dir
dir\r
   \r
Checking data, sizes: f=2 z=36 (36)
Adding uncompressed data for 6d7fce9fee471194aa8b5b6e47267f03-0
A f     /home/User/test/dir/file3.txt
Database modified: myClient
Database closed: myClient
 -> umount -fl test_db/.mount/myClient
Trying client 'myClient.xp' using protocol 'smb'
 -> mount -t cifs -o ro,noatime,nocase //myClient/C$ test_db/.mount/myClient.xp
 -> Reading client configuration file: myClient.xp
 -> Client: myClient
 --> Subset: xp
 --> Protocol: smb
 --> Config: C:/Backup/Backup.LST
 --> Expiry: none
 --> Paths: 
 ---> Path: C:/Test Dir
 ----> Filter: and silly
 -----> Condition: filter backup
 -----> Condition: type p
 -----> Condition: name a
 -----> Condition: name_start b
 -----> Condition: name_end c
 -----> Condition: name_regex d
 -----> Condition: path e
 -----> Condition: path_start f
 -----> Condition: path_end g
 -----> Condition: name_regex h
 -----> Condition: size>= 1
 -----> Condition: size> 2048
 -----> Condition: size<= 3000000
 -----> Condition: size< 4294967296
 -----> Condition: mode& 777
 -----> Condition: mode= 644
Backing up client: myClient.xp
List created: myClient.xp
Database open r/w: myClient.xp
Backing up path: C:/Test Dir
A       C:/Test Dir/My Dir
My Dir\r
      \r
Checking data, sizes: f=2 z=36 (36)
A       C:/Test Dir/My Dir/a File.TXT
Checking data, sizes: f=2 z=36 (36)
A       C:/Test Dir/My Dir/another File.TXT
Checking data, sizes: f=0 z=0 (0)
A       C:/Test Dir/My File.TXT
Database modified: myClient.xp
Database closed: myClient.xp
 -> umount -fl test_db/.mount/myClient.xp
 -> Reading client configuration file: myhost
 -> Client: myhost
 --> Protocol: file
 --> Hostname: myhost.mynetwork.lan
 --> No warning on time out
 --> No error if same file fails copy again
 --> Config: etc/localhost.list
 --> Expiry: 86400s (1d)
 --> Filter: and subdir
 ---> Condition: path_start subdir
 ---> Condition: not size< 100
 --> Filter: and bigfile
 ---> Condition: size>= 10
 ---> Condition: type f
 --> Paths: 
 ---> Path: test1
 ----> Filter: and not_object
 -----> Condition: not path_end .o
 ----> Filter: or to_be_ignored
 -----> Condition: filter subdir
 -----> Condition: filter backup
 -----> Condition: not filter not_object
 ----> Parser: CVS
 ----> Parser: Subversion
 ----> Compress filter: bigfile
 ----> Ignore filter: to_be_ignored
 ---> Path: test2
Backing up client: myhost
List created: myhost
Database open r/w: myhost
Backing up path: test1
File copy progress:   5.0%\r
File copy progress:  10.0%\r
File copy progress:  15.0%\r
File copy progress:  20.0%\r
File copy progress:  25.0%\r
File copy progress:  30.0%\r
File copy progress:  35.0%\r
File copy progress:  40.0%\r
File copy progress:  45.0%\r
File copy progress:  50.0%\r
File copy progress:  55.0%\r
File copy progress:  60.0%\r
File copy progress:  65.0%\r
File copy progress:  70.0%\r
File copy progress:  75.0%\r
File copy progress:  80.0%\r
File copy progress:  85.0%\r
File copy progress:  90.0%\r
File copy progress:  95.0%\r
File copy progress: 100.0%\r
                          \r
Checking data, sizes: f=10485760 z=10222 (10381)
Adding compressed data for f1c9645dbc14efddc7d8a322685f26eb-0
A z     test1/big_file
A       test1/cvs
cvs\r
   \r
 -> Parsing CVS entries
 Conditional jump or move depends on uninitialised value(s)
   (within /lib/tls/i686/cmov/libc-2.7.so)
   mktime (in /lib/tls/i686/cmov/libc-2.7.so)
   hbackup::CvsParser::CvsParser(hbackup::Parser::Mode, std::string const&) (cvs_parser.cpp:148)
   hbackup::CvsParser::isControlled(std::string const&) const (cvs_parser.cpp:58)
   hbackup::Parsers::isControlled(std::string const&) const (parsers.cpp:37)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:59)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
   hbackup::HBackup::backup(bool) (interface.cpp:505)
   main (hbackup.cpp:441)
 --> dirbad: D
 --> dirutd: D
 --> filemod.o: 1159806431
 --> filenew.c: 0
 --> fileutd.h: 1159985080
A       test1/cvs/CVS
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1141)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1184)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1187)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1627)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1633)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1633)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1620)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Use of uninitialised value of size 4
   deflate_slow (deflate.c:1083)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1096)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Use of uninitialised value of size 4
   deflate_slow (deflate.c:1122)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1122)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1649)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1649)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Use of uninitialised value of size 4
   deflate_slow (deflate.c:1655)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1669)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1600)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1602)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1605)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
 
 Use of uninitialised value of size 4
   compress_block (trees.c:1094)
   _tr_flush_block (trees.c:1000)
   deflate_slow (deflate.c:1704)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
       \r
Checking data, sizes: f=161 z=154 (156)
Adding compressed data for fef51838cd3cfe8ed96355742eb71fbd-0
A z     test1/cvs/CVS/Entries
Checking data, sizes: f=16 z=50 (50)
Adding uncompressed data for b90f8fa56ea1d39881d4a199c7a81d35-0
A f     test1/cvs/CVS/Root
A       test1/cvs/dirbad
cvs/dirbad\r
          \r
Warning: test1/cvs/dirbad: Directory should be under CVS control
A       test1/cvs/dirutd
cvs/dirutd\r
          \r
 -> Parsing CVS entries
 --> fileutd: 1159985080
A       test1/cvs/dirutd/CVS
cvs/dirutd/CVS\r
              \r
Checking data, sizes: f=42 z=76 (77)
Adding uncompressed data for 5252f242d27b8c2c9fdbdcbb33545d07-0
A f     test1/cvs/dirutd/CVS/Entries
Checking data, sizes: f=10 z=44 (44)
Adding uncompressed data for eb75fb33b2019ef3c840eb5ccdc2e795-0
A f     test1/cvs/dirutd/CVS/Root
Checking data, sizes: f=0 z=0 (0)
A       test1/cvs/dirutd/fileutd
Checking data, sizes: f=0 z=0 (0)
A       test1/cvs/filenew.c
Checking data, sizes: f=0 z=0 (0)
A       test1/cvs/fileutd.h
A       test1/dir space
dir space\r
         \r
Checking data, sizes: f=0 z=0 (0)
A       test1/dir space/file space
A       test1/svn
svn\r
   \r
 -> Parsing Subversion entries
 --> diroth: o
 --> filemod.o: m
 --> filenew.c: m
 --> fileoth: i
A       test1/svn/.svn
 
 Conditional jump or move depends on uninitialised value(s)
   deflate_slow (deflate.c:1141)
   deflate (deflate.c:822)
   hbackup::Stream::write_compress(void const*, unsigned, bool) (files.cpp:813)
   hbackup::Stream::write(void const*, unsigned) (files.cpp:891)
   hbackup::Stream::close() (files.cpp:558)
   hbackup::Data::write(char const*, char const*, char**, int, int*) (data.cpp:393)
   hbackup::Database::add(hbackup::OpData const&, bool) (db.cpp:721)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:115)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
        \r
Checking data, sizes: f=77 z=79 (80)
Adding uncompressed data for 0f2ea973d77135dc3d06c8e68da6dc59-0
A f     test1/svn/.svn/entries
A       test1/svn/dirbad
svn/dirbad\r
          \r
Warning: test1/svn/dirbad: Directory should be under Subversion control
A       test1/svn/dirutd
svn/dirutd\r
          \r
 -> Parsing Subversion entries
 --> fileoth: o
 --> fileutd: m
A       test1/svn/dirutd/.svn
svn/dirutd/.svn\r
               \r
Checking data, sizes: f=30 z=52 (52)
Adding uncompressed data for 8bdef5751e46ed57d237cbe3f4a5061c-0
A f     test1/svn/dirutd/.svn/entries
Checking data, sizes: f=0 z=0 (0)
A       test1/svn/dirutd/fileutd
Checking data, sizes: f=0 z=0 (0)
A       test1/svn/filenew.c
Checking data, sizes: f=0 z=0 (0)
A       test1/test space
A       test1/testdir
testdir\r
       \r
Checking data, sizes: f=13 z=47 (47)
Adding uncompressed data for 59ca0efa9f5633cb0371bbc0355478d8-0
A f     test1/testfile
A       test1/testlink
A       test1/testpipe
Backing up path: test2
A       test2/testdir
testdir\r
       \r
Checking data, sizes: f=145408 z=190 (192)
Adding compressed data for 3d546a1ce46c6ae10ad34ab8a81c542e-0
A z     test2/testfile
Checking data, sizes: f=259072 z=300 (304)
Adding compressed data for fb00cd74a5f35e89a7fbdd3c1d05375a-0
A z     test2/testfile2
Checking data, sizes: f=145461 z=145518 (147791)
Adding uncompressed data for f81f70dceaca8b0cec354f33fa3f0909-0
A f     test2/testfile2.gz
Checking data, sizes: f=524288 z=557 (565)
Adding compressed data for 59071590099d21dd439896592338bf95-0
A z     test2/testfile~
A       test2/testlink
Database modified: myhost
Database closed: myhost
Trying client 'other' using protocol 'ssh'
Error: other: Protocol not supported: ssh
Database closed
 
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Specify clients
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> client.xp
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Backing up in server mode
Database open in read/write mode
Trying client 'client.xp' using protocol 'smb'
 -> mount -t cifs -o ro,noatime,nocase,username=Myself,password=flesyM,nocase //myClient/C$ test_db/.mount/client.xp
 -> Reading client configuration file: client.xp
 -> Client: client
 --> Subset: xp
 --> Protocol: smb
 --> Hostname: myClient
 --> Options: username=Myself password=flesyM nocase 
 --> Config: C:/Backup/Backup.LST
 --> Expiry: none
 --> Paths: 
 ---> Path: C:/Test Dir
 ----> Filter: and silly
 -----> Condition: filter backup
 -----> Condition: type p
 -----> Condition: name a
 -----> Condition: name_start b
 -----> Condition: name_end c
 -----> Condition: name_regex d
 -----> Condition: path e
 -----> Condition: path_start f
 -----> Condition: path_end g
 -----> Condition: name_regex h
 -----> Condition: size>= 1
 -----> Condition: size> 2048
 -----> Condition: size<= 3000000
 -----> Condition: size< 4294967296
 -----> Condition: mode& 777
 -----> Condition: mode= 644
Backing up client: client.xp
Reading list of problematic checksums
Database open r/w: client.xp
Backing up path: C:/Test Dir
My Dir\r
      \r
Database closed: client.xp
 -> umount -fl test_db/.mount/client.xp
 -> Reading client configuration file: myhost
 -> Client: myhost
 --> Protocol: file
 --> Hostname: myhost.mynetwork.lan
 --> No warning on time out
 --> No error if same file fails copy again
 --> Config: etc/localhost.list
 --> Expiry: 86400s (1d)
 --> Filter: and subdir
 ---> Condition: path_start subdir
 ---> Condition: not size< 100
 --> Filter: and bigfile
 ---> Condition: size>= 10
 ---> Condition: type f
 --> Paths: 
 ---> Path: test1
 ----> Filter: and not_object
 -----> Condition: not path_end .o
 ----> Filter: or to_be_ignored
 -----> Condition: filter subdir
 -----> Condition: filter backup
 -----> Condition: not filter not_object
 ----> Parser: CVS
 ----> Parser: Subversion
 ----> Compress filter: bigfile
 ----> Ignore filter: to_be_ignored
 ---> Path: test2
Backing up client: myhost
Database open r/w: myhost
Backing up path: test1
cvs\r
   \r
 -> Parsing CVS entries
 Conditional jump or move depends on uninitialised value(s)
   (within /lib/tls/i686/cmov/libc-2.7.so)
   mktime (in /lib/tls/i686/cmov/libc-2.7.so)
   hbackup::CvsParser::CvsParser(hbackup::Parser::Mode, std::string const&) (cvs_parser.cpp:148)
   hbackup::CvsParser::isControlled(std::string const&) const (cvs_parser.cpp:58)
   hbackup::Parsers::isControlled(std::string const&) const (parsers.cpp:37)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:59)
   hbackup::ClientPath::parse_recurse(hbackup::Database&, char const*, char const*, int, hbackup::Directory&, hbackup::Parser const*) (paths.cpp:127)
   hbackup::ClientPath::parse(hbackup::Database&, char const*, char const*) (paths.cpp:225)
   hbackup::Client::backup(hbackup::Database&, hbackup::Filters const&, char const*, bool) (clients.cpp:566)
   hbackup::HBackup::backup(bool) (interface.cpp:505)
   main (hbackup.cpp:441)
 --> dirbad: D
 --> dirutd: D
 --> filemod.o: 1159806431
 --> filenew.c: 0
 --> fileutd.h: 1159985080
cvs/CVS\r
cvs/dirbad\r
          \r
Warning: test1/cvs/dirbad: Directory should be under CVS control
cvs/dirutd\r
          \r
 -> Parsing CVS entries
 --> fileutd: 1159985080
cvs/dirutd/CVS\r
dir space     \r
svn      \r
   \r
 -> Parsing Subversion entries
 --> diroth: o
 --> filemod.o: m
 --> filenew.c: m
 --> fileoth: i
svn/.svn\r
svn/dirbad\r
          \r
Warning: test1/svn/dirbad: Directory should be under Subversion control
svn/dirutd\r
          \r
 -> Parsing Subversion entries
 --> fileoth: o
 --> fileutd: m
svn/dirutd/.svn\r
testdir        \r
       \r
Backing up path: test2
testdir\r
       \r
Database closed: myhost
Database closed
 
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
User-mode backup
 -> DB path: test_user/.hbackup
 -> Selected clients:
 --> localhost
 -> Clients:
 --> Client: localhost
 ---> Protocol: file
 ---> Config: test_user/.hbackup/config
 ---> Expiry: none
Backing up in user mode
Database initialized: test_user/.hbackup
Database open in read/write mode
 -> Reading client configuration file: localhost
 -> Client: localhost
 --> Protocol: file
 --> Config: test_user/.hbackup/config
 --> Expiry: none
 --> Paths: 
 ---> Path: test_user/testuser
 ----> No error if same file fails copy again
Reading list of problematic checksums
List created: localhost
Database open r/w: localhost
Backing up path: test_user/testuser
Adding uncompressed data for 31d30eea8d0968d6458e0ad0027c9f80-0
A f     test_user/testuser/f1.txt
A       test_user/testuser/subdir
subdir\r
      \r
Adding uncompressed data for dbbf8220893d497d403bb9cdf49db7a4-0
A f     test_user/testuser/subdir/f2.txt
A       test_user/testuser/subdir2
subdir2\r
       \r
Adding uncompressed data for d5b4c7d9b06b60a7846c4529834c9812-0
A f     test_user/testuser/subdir2/f3.txt
Adding uncompressed data for 90e2a51705594d033a3abe9d77b2b7ad-0
A f     test_user/testuser/subdir2/f4.txt
Database modified: localhost
Database closed: localhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Fix DB
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Fixing database
Database open in read/write mode
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Scan DB
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Scanning database
Database open in read/write mode
Reading list: aClient.vista
Reading list: client.xp
Reading list: myClient
Reading list: myClient.xp
Reading list: myhost
Found 16 checksums
Crawling through DB
0f2ea973d77135dc3d06c8e68da6dc59-0\r
26ab0db90d72e28ad0ba1e22ee510510-0\r
3d546a1ce46c6ae10ad34ab8a81c542e-0\r
5252f242d27b8c2c9fdbdcbb33545d07-0\r
59071590099d21dd439896592338bf95-0\r
59ca0efa9f5633cb0371bbc0355478d8-0\r
6d7fce9fee471194aa8b5b6e47267f03-0\r
8bdef5751e46ed57d237cbe3f4a5061c-0\r
b026324c6904b2a9cb4b88d6d61c81d1-0\r
b90f8fa56ea1d39881d4a199c7a81d35-0\r
d41d8cd98f00b204e9800998ecf8427e-0\r
eb75fb33b2019ef3c840eb5ccdc2e795-0\r
f1c9645dbc14efddc7d8a322685f26eb-0\r
f81f70dceaca8b0cec354f33fa3f0909-0\r
fb00cd74a5f35e89a7fbdd3c1d05375a-0\r
fef51838cd3cfe8ed96355742eb71fbd-0\r
                                  \r
Found 16 valid and 0 broken data files
Checksum(s) from list: 16
 -> 0f2ea973d77135dc3d06c8e68da6dc59-0, 77
 -> 26ab0db90d72e28ad0ba1e22ee510510-0, 2
 -> 3d546a1ce46c6ae10ad34ab8a81c542e-0, 145408
 -> 5252f242d27b8c2c9fdbdcbb33545d07-0, 42
 -> 59071590099d21dd439896592338bf95-0, 524288
 -> 59ca0efa9f5633cb0371bbc0355478d8-0, 13
 -> 6d7fce9fee471194aa8b5b6e47267f03-0, 2
 -> 8bdef5751e46ed57d237cbe3f4a5061c-0, 30
 -> b026324c6904b2a9cb4b88d6d61c81d1-0, 2
 -> b90f8fa56ea1d39881d4a199c7a81d35-0, 16
 -> d41d8cd98f00b204e9800998ecf8427e-0, 0
 -> eb75fb33b2019ef3c840eb5ccdc2e795-0, 10
 -> f1c9645dbc14efddc7d8a322685f26eb-0, 10485760
 -> f81f70dceaca8b0cec354f33fa3f0909-0, 145461
 -> fb00cd74a5f35e89a7fbdd3c1d05375a-0, 259072
 -> fef51838cd3cfe8ed96355742eb71fbd-0, 161
Checksum(s) with data: 16
 -> 0f2ea973d77135dc3d06c8e68da6dc59-0, 77
 -> 26ab0db90d72e28ad0ba1e22ee510510-0, 2
 -> 3d546a1ce46c6ae10ad34ab8a81c542e-0, 145408
 -> 5252f242d27b8c2c9fdbdcbb33545d07-0, 42
 -> 59071590099d21dd439896592338bf95-0, 524288
 -> 59ca0efa9f5633cb0371bbc0355478d8-0, 13
 -> 6d7fce9fee471194aa8b5b6e47267f03-0, 2
 -> 8bdef5751e46ed57d237cbe3f4a5061c-0, 30
 -> b026324c6904b2a9cb4b88d6d61c81d1-0, 2
 -> b90f8fa56ea1d39881d4a199c7a81d35-0, 16
 -> d41d8cd98f00b204e9800998ecf8427e-0, 0
 -> eb75fb33b2019ef3c840eb5ccdc2e795-0, 10
 -> f1c9645dbc14efddc7d8a322685f26eb-0, 10485760
 -> f81f70dceaca8b0cec354f33fa3f0909-0, 145461
 -> fb00cd74a5f35e89a7fbdd3c1d05375a-0, 259072
 -> fef51838cd3cfe8ed96355742eb71fbd-0, 161
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Check DB
 -> Reading configuration file: etc/hbackup.conf
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Checking database
Database open in read-only mode
Crawling through DB data
0f2ea973d77135dc3d06c8e68da6dc59-0\r
26ab0db90d72e28ad0ba1e22ee510510-0\r
3d546a1ce46c6ae10ad34ab8a81c542e-0\r
5252f242d27b8c2c9fdbdcbb33545d07-0\r
59071590099d21dd439896592338bf95-0\r
59ca0efa9f5633cb0371bbc0355478d8-0\r
6d7fce9fee471194aa8b5b6e47267f03-0\r
8bdef5751e46ed57d237cbe3f4a5061c-0\r
b026324c6904b2a9cb4b88d6d61c81d1-0\r
b90f8fa56ea1d39881d4a199c7a81d35-0\r
d41d8cd98f00b204e9800998ecf8427e-0\r
eb75fb33b2019ef3c840eb5ccdc2e795-0\r
f1c9645dbc14efddc7d8a322685f26eb-0\r
f81f70dceaca8b0cec354f33fa3f0909-0\r
fb00cd74a5f35e89a7fbdd3c1d05375a-0\r
fef51838cd3cfe8ed96355742eb71fbd-0\r
                                  \r
Found 16 valid and 0 broken data files
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
List clients
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Showing list
Database open in read-only mode
	aClient.vista
	client.xp
	myClient
	myClient.xp
	myhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Try to list paths in both myhost and smb://client (fails)
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Showing list
Database open in read-only mode
Database open r-o: myhost
Database closed: myhost
	test1/
	test2/
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
List paths in myhost
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Showing list
Database open in read-only mode
Database open r-o: myhost
Database closed: myhost
	test1/
	test2/
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
List paths in myhost under test2/
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Showing list
Database open in read-only mode
Database open r-o: myhost
Database closed: myhost
	test2/testdir/
	test2/testfile
	test2/testfile2
	test2/testfile2.gz
	test2/testfile~
	test2/testlink
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
List paths in myhost under test1/cvs
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Showing list
Database open in read-only mode
Database open r-o: myhost
Database closed: myhost
	test1/cvs/CVS/
	test1/cvs/dirbad/
	test1/cvs/dirutd/
	test1/cvs/filenew.c
	test1/cvs/fileutd.h
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Restore a file
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Restoring
Database open in read-only mode
Database open r-o: myhost
U test_r/test2/testfile
Database closed: myhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Restore all data in a client/dir path that's not by itself in DB
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Restoring
Database open in read-only mode
Database open r-o: myhost
U test_r/test1/big_file
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/CVS/Root
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/CVS/Root
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/file space
U test_r/test1/svn
U test_r/test1/svn/.svn
U test_r/test1/svn/.svn/entries
U test_r/test1/svn/dirbad
U test_r/test1/svn/dirutd
U test_r/test1/svn/dirutd/.svn
U test_r/test1/svn/dirutd/.svn/entries
U test_r/test1/svn/dirutd/fileutd
U test_r/test1/svn/filenew.c
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
Database closed: myhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Restore all data in a client/dir path
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Restoring
Database open in read-only mode
Database open r-o: myhost
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/CVS/Root
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/CVS/Root
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
Database closed: myhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Restore all data in a client
 -> Reading configuration file: etc/hbackup.conf
Database open in read-only mode
Database closed
 -> DB path: test_db
 -> Automatic compression
 -> Selected clients:
 --> myhost
 -> Clients:
 --> Client: aClient
 ---> Protocol: smb
 ---> Expiry: none
 ---> Filter: and huge_file
 ----> Condition: not filter backup
 ----> Condition: not size< 100
 ---> Paths: 
 ----> Path: C:/Test Dir
 -----> Filter: and compress_m
 ------> Condition: not filter huge_file
 -----> Parser: Subversion
 -----> Compress filter: compress_m
 -----> Ignore filter: backup
 -----> No error if same file fails copy again
 ---> Required subset: vista
 --> Client: client
 ---> Protocol: smb
 ---> Hostname: myClient
 ---> Options: username=Myself password=flesyM nocase 
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myClient
 ---> Protocol: nfs
 ---> Config: /home/User/hbackup.list
 ---> Expiry: none
 --> Client: myClient
 ---> Protocol: smb
 ---> Config: C:/Backup/Backup.LST
 ---> Expiry: none
 ---> Required subset: xp
 --> Client: myhost
 ---> Protocol: file
 ---> Hostname: myhost.mynetwork.lan
 ---> No warning on time out
 ---> No error if same file fails copy again
 ---> Config: etc/localhost.list
 ---> Expiry: 86400s (1d)
 --> Client: other
 ---> Protocol: ssh
 ---> Hostname: otherClient
 ---> Config: /home/backup/Backup.list
 ---> Expiry: 86400s (1d)
 ---> Filter: and subdir
 ----> Condition: path_start subdir
 ----> Condition: not size< 100
 ---> Filter: and bigfile
 ----> Condition: size>= 10
 ----> Condition: type f
 ---> Paths: 
 ----> Path: test1
 -----> Filter: and not_object
 ------> Condition: not path_end .o
 -----> Filter: or to_be_ignored
 ------> Condition: filter subdir
 ------> Condition: filter backup
 ------> Condition: not filter not_object
 -----> Parser: CVS
 -----> Parser: Subversion
 -----> Compress filter: bigfile
 -----> Ignore filter: to_be_ignored
 ----> Path: test2
 -> Filter: and backup
 --> Condition: type f
 --> Condition: path_end ~
 -> Filter: or test_or
 --> Condition: filter backup
 --> Condition: not size< 1000
Restoring
Database open in read-only mode
Database open r-o: myhost
U test_r/test1/big_file
U test_r/test1/cvs
U test_r/test1/cvs/CVS
U test_r/test1/cvs/CVS/Entries
U test_r/test1/cvs/CVS/Root
U test_r/test1/cvs/dirbad
U test_r/test1/cvs/dirutd
U test_r/test1/cvs/dirutd/CVS
U test_r/test1/cvs/dirutd/CVS/Entries
U test_r/test1/cvs/dirutd/CVS/Root
U test_r/test1/cvs/dirutd/fileutd
U test_r/test1/cvs/filenew.c
U test_r/test1/cvs/fileutd.h
U test_r/test1/dir space
U test_r/test1/dir space/file space
U test_r/test1/svn
U test_r/test1/svn/.svn
U test_r/test1/svn/.svn/entries
U test_r/test1/svn/dirbad
U test_r/test1/svn/dirutd
U test_r/test1/svn/dirutd/.svn
U test_r/test1/svn/dirutd/.svn/entries
U test_r/test1/svn/dirutd/fileutd
U test_r/test1/svn/filenew.c
U test_r/test1/test space
U test_r/test1/testdir
U test_r/test1/testfile
U test_r/test1/testlink
U test_r/test1/testpipe
U test_r/test2/testdir
U test_r/test2/testfile
U test_r/test2/testfile2
U test_r/test2/testfile2.gz
U test_r/test2/testfile~
U test_r/test2/testlink
Database closed: myhost
Database closed
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
Broken configuration
 -> Reading configuration file: etc/broken.conf
Error: after line: 0: need at most 1 occurence(s) of keyword 'db'
Error: after line: 0: need at most 1 occurence(s) of keyword 'report_copy_error_once'
Error: after line: 0: need at most 1 occurence(s) of keyword 'timeout_nowarning'
Error: at line: 10: keyword 'filter' requires 2 parameter(s), found 1
Error: after line: 14: missing keyword 'condition'
Error: after line: 19: need at most 1 occurence(s) of keyword 'config'
Error: after line: 19: need at most 1 occurence(s) of keyword 'expire'
Error: after line: 19: need at most 1 occurence(s) of keyword 'hostname'
Error: at line: 23: keyword 'option' requires at most 2 parameter(s), found 3
Error: at line: 24: keyword 'option' requires at least 1 parameter(s), found 0
Error: at line: 32: keyword 'filter' requires 2 parameter(s), found 3
Error: at line: 33: keyword 'condition' requires 2 parameter(s), found 3
Error: at line: 34: keyword 'condition' requires 2 parameter(s), found 1
Error: at line: 37: keyword 'expire' requires 1 parameter(s), found 2
Error: after line: 41: need at most 1 occurence(s) of keyword 'compress'
Error: after line: 41: need at most 1 occurence(s) of keyword 'ignore'
Error: after line: 51: missing keyword 'condition'
Error: at line: 53: keyword 'filter' requires 2 parameter(s), found 1
Error: after line: 53: missing keyword 'condition'
Error: after line: 65: missing keyword 'protocol'
Error: at line: 71: keyword 'ignore' requires 1 parameter(s), found 2
Error: at line: 72: keyword 'compress' requires 1 parameter(s), found 2
Error: at line: 85: keyword 'ignore' requires 1 parameter(s), found 0
Error: at line: 86: keyword 'compress' requires 1 parameter(s), found 0
Error: at line: 88: keyword 'what_the_f...?' incorrect or misplaced, aborting
Note: the default configuration path has changed from '/etc/hbackup/hbackup.conf' to '/etc/hbackup/config'
 
 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
   operator new(unsigned) (vg_replace_malloc.c:224)
   TCLAP::CmdLine::_constructor() (CmdLine.h:299)
   TCLAP::CmdLine::CmdLine(std::string const&, char, std::string const&, bool) (CmdLine.h:275)
   main (hbackup.cpp:219)
